
** Conflict (shift/reduce) in state 64.
** Tokens involved: SUB NE MUL MOD LT LE GT GE EQ DIV BLOR BLAND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

list(tpDecl) WHERE expr arith_op expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
prog EOF 
list(tpDecl) query 
             list(clause) 
             clause list(clause) 
             WHERE expr 
                   (?)

** In state 64, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

expr arith_op expr 
              expr arith_op expr 
                   . SUB 

** In state 64, looking ahead at SUB, reducing production
** expr -> expr arith_op expr
** is permitted because of the following sub-derivation:

expr arith_op expr // lookahead token appears because arith_op can begin with SUB
expr arith_op expr . 

** Conflict (shift/reduce) in state 62.
** Tokens involved: SUB NE MUL MOD LT LE GT GE EQ DIV BLOR BLAND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

list(tpDecl) WHERE expr blogic expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
prog EOF 
list(tpDecl) query 
             list(clause) 
             clause list(clause) 
             WHERE expr 
                   (?)

** In state 62, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

expr blogic expr 
            expr arith_op expr 
                 . SUB 

** In state 62, looking ahead at SUB, reducing production
** expr -> expr blogic expr
** is permitted because of the following sub-derivation:

expr arith_op expr // lookahead token appears because arith_op can begin with SUB
expr blogic expr . 

** Conflict (shift/reduce) in state 60.
** Tokens involved: SUB NE MUL MOD LT LE GT GE EQ DIV BLOR BLAND ADD
** The following explanations concentrate on token SUB.
** This state is reached from main after reading:

list(tpDecl) WHERE expr comp_op expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

main 
prog EOF 
list(tpDecl) query 
             list(clause) 
             clause list(clause) 
             WHERE expr 
                   (?)

** In state 60, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

expr comp_op expr 
             expr arith_op expr 
                  . SUB 

** In state 60, looking ahead at SUB, reducing production
** expr -> expr comp_op expr
** is permitted because of the following sub-derivation:

expr arith_op expr // lookahead token appears because arith_op can begin with SUB
expr comp_op expr . 
